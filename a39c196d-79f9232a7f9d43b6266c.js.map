{"version":3,"sources":["webpack:///./src/pages/index.tsx"],"names":["STARTING_WEIGHTS","Tweet","props","useState","tweetLoaded","setTweetLoaded","css","color","gray8","tweetId","onLoad","Paper","abstract","expandAbstract","setExpandAbstract","showTweets","setShowTweets","nTweets","setNTweets","abstractDisplayStyle","onClick","className","light","blue6","substring","indexOf","s2","s2id","href","target","gray5","gray2","gray6","src","SemanticScholarLogo","buzz","citations","weights","twitter","likes","replies","retweets","toFixed","posterSession","width","height","cx","cy","fill","geekblue5","r","gray7","i","title","authors","join","pdf","length","emoji","size","arXiv","gray10","prev","TwitterLogo","yellow9","CiteIcon","ReplyIcon","RetweetIcon","LikeIcon","ids","slice","map","key","DecimalStep","span","min","max","onChange","value","isNaN","setInputValue","setDirty","inputValue","step","tooltipVisible","style","margin","SortWeights","citationsInput","setCitationsInput","retweetsInput","setRetweetsInput","likesInput","setLikesInput","repliesInput","setRepliesInput","isDirty","darken","gray1","gray4","setSortWeights","PosterSessionDate","checked","posterSessions","has","date","setPosterSessions","Set","delete","add","Home","papers","data","allPaperDataJson","edges","setAbstractDisplayStyle","foldMenu","setFoldMenu","sortWeights","filter","paper","node","sort","p1","p2","likes1","retweets1","replies1","citations1","likes2","retweets2","replies2","citations2","dark","blue1","geekblue8","gray9","Group","geekblue4","geekblue7","e","Button","owner","repo","id"],"mappings":"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","file":"a39c196d-79f9232a7f9d43b6266c.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Latex from \"react-latex\";\r\nimport { Button, Radio, Checkbox, Slider, InputNumber, Row, Col } from \"antd\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { css } from \"@emotion/react\";\r\nimport color from \"~styles/color\";\r\nimport { graphql } from \"gatsby\";\r\nimport { Emoji } from \"emoji-mart\";\r\nimport { MenuFoldOutlined, GithubOutlined } from \"@ant-design/icons\";\r\nimport { darken } from \"polished\";\r\nimport SemanticScholarLogo from \"~icons/semantic-scholar.svg\";\r\nimport TwitterLogo from \"~icons/twitter.svg\";\r\nimport RetweetIcon from \"~icons/retweet-blue.svg\";\r\nimport LikeIcon from \"~icons/like-blue.svg\";\r\nimport ReplyIcon from \"~icons/reply-blue.svg\";\r\nimport CiteIcon from \"~icons/cite.svg\";\r\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\r\nimport { Star } from \"React-github-buttons\";\r\n\r\ninterface PaperData {\r\n  abstract: string;\r\n  citations: number;\r\n  title: string;\r\n  twitter: {\r\n    likes: number;\r\n    replies: number;\r\n    retweets: number;\r\n    ids: string[];\r\n  };\r\n  id: number;\r\n  s2id: string;\r\n  pdf: string;\r\n  authors: string[];\r\n  arXiv: string;\r\n  posterSession: \"Monday\" | \"Tuesday\" | \"Wednesday\" | \"Thursday\" | \"Friday\";\r\n}\r\n\r\ninterface PaperComponent extends PaperData {\r\n  i: number;\r\n  abstractDisplayStyle: string;\r\n  weights: {\r\n    citations: number;\r\n    replies: number;\r\n    retweets: number;\r\n    likes: number;\r\n  };\r\n}\r\n\r\nconst STARTING_WEIGHTS = {\r\n  citations: 1,\r\n  retweets: 0.5,\r\n  likes: 0.25,\r\n  replies: 0.25,\r\n};\r\n\r\nfunction Tweet(props: { tweetId: string }) {\r\n  const [tweetLoaded, setTweetLoaded] = useState(false);\r\n  return (\r\n    <div\r\n      css={css`\r\n        max-width: 350px;\r\n        width: 100%;\r\n        display: inline-block;\r\n        vertical-align: top;\r\n        margin-right: 15px;\r\n      `}\r\n    >\r\n      {!tweetLoaded ? (\r\n        <div\r\n          css={css`\r\n            /* text-align: center; */\r\n            margin-top: 10px;\r\n            color: ${color.gray8};\r\n          `}\r\n        >\r\n          Loading Tweet...\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <TwitterTweetEmbed\r\n        tweetId={props.tweetId}\r\n        onLoad={() => setTweetLoaded(true)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Paper(props: PaperComponent) {\r\n  const [expandAbstract, setExpandAbstract] = useState(false),\r\n    [showTweets, setShowTweets] = useState(false),\r\n    [nTweets, setNTweets] = useState(3);\r\n\r\n  let abstract: string | React.ReactNode;\r\n  switch (props.abstractDisplayStyle) {\r\n    case \"full\":\r\n      abstract = props.abstract;\r\n      break;\r\n    case \"preview\":\r\n      if (expandAbstract) {\r\n        abstract = (\r\n          <>\r\n            {props.abstract}{\" \"}\r\n            <span\r\n              onClick={() => setExpandAbstract(false)}\r\n              className=\"noselect\"\r\n              css={css`\r\n                color: ${color.light.blue6};\r\n                &:hover {\r\n                  cursor: pointer;\r\n                }\r\n              `}\r\n            >\r\n              [Collapse]\r\n            </span>\r\n          </>\r\n        );\r\n      } else {\r\n        abstract = (\r\n          <>\r\n            {props.abstract.substring(0, props.abstract.indexOf(\". \") + 1)}{\" \"}\r\n            <span\r\n              onClick={() => setExpandAbstract(true)}\r\n              className=\"noselect\"\r\n              css={css`\r\n                color: ${color.light.blue6};\r\n                &:hover {\r\n                  cursor: pointer;\r\n                }\r\n              `}\r\n            >\r\n              [Expand]\r\n            </span>\r\n          </>\r\n        );\r\n      }\r\n      break;\r\n    case \"hide\":\r\n      abstract = \"\";\r\n      break;\r\n    default:\r\n      throw `No idea what ${props.abstractDisplayStyle} is! Must be in {\"full\", \"preview\", \"hide\"}.`;\r\n  }\r\n\r\n  const s2 = props.s2id ? (\r\n    <a href={`//semanticscholar.org/paper/${props.s2id}`} target=\"_blank\">\r\n      <div\r\n        css={css`\r\n          display: inline-block;\r\n          border: 1px solid ${color.gray5};\r\n          padding-left: 10px;\r\n          padding-right: 10px;\r\n          padding-top: 2px;\r\n          padding-bottom: 4px;\r\n          border-radius: 3px;\r\n          font-size: 13px;\r\n          background-color: ${color.gray2 + \"77\"};\r\n          transition-duration: 0.3s;\r\n          margin-right: 10px;\r\n          &:hover {\r\n            border-color: ${color.gray6};\r\n            background-color: ${color.gray2};\r\n          }\r\n        `}\r\n      >\r\n        <img\r\n          src={SemanticScholarLogo}\r\n          css={css`\r\n            height: 17px;\r\n            margin-right: 5px;\r\n          `}\r\n        />\r\n        Semantic Scholar\r\n      </div>\r\n    </a>\r\n  ) : (\r\n    <></>\r\n  );\r\n\r\n  let buzz: string | number = 0;\r\n  if (props.citations) {\r\n    buzz += props.citations * props.weights.citations;\r\n  }\r\n  if (props.twitter) {\r\n    buzz +=\r\n      props.twitter.likes * props.weights.likes +\r\n      props.twitter.replies * props.weights.replies +\r\n      props.twitter.retweets * props.weights.retweets;\r\n  }\r\n  buzz = buzz.toFixed(2);\r\n\r\n  const posterSession = (\r\n    <>\r\n      <svg\r\n        width=\"70\"\r\n        height=\"10\"\r\n        css={css`\r\n          margin-top: 10px;\r\n        `}\r\n      >\r\n        <circle\r\n          cx=\"5\"\r\n          cy=\"5\"\r\n          fill={\r\n            props.posterSession === \"Monday\"\r\n              ? color.light.geekblue5\r\n              : color.gray5\r\n          }\r\n          r=\"5\"\r\n        />\r\n        <circle\r\n          cx=\"20\"\r\n          cy=\"5\"\r\n          fill={\r\n            props.posterSession === \"Tuesday\"\r\n              ? color.light.geekblue5\r\n              : color.gray5\r\n          }\r\n          r=\"5\"\r\n        />\r\n        <circle\r\n          cx=\"35\"\r\n          cy=\"5\"\r\n          fill={\r\n            props.posterSession === \"Wednesday\"\r\n              ? color.light.geekblue5\r\n              : color.gray5\r\n          }\r\n          r=\"5\"\r\n        />\r\n        <circle\r\n          cx=\"50\"\r\n          cy=\"5\"\r\n          fill={\r\n            props.posterSession === \"Thursday\"\r\n              ? color.light.geekblue5\r\n              : color.gray5\r\n          }\r\n          r=\"5\"\r\n        />\r\n        <circle\r\n          cx=\"65\"\r\n          cy=\"5\"\r\n          fill={\r\n            props.posterSession === \"Friday\"\r\n              ? color.light.geekblue5\r\n              : color.gray5\r\n          }\r\n          r=\"5\"\r\n        />\r\n      </svg>\r\n      <span\r\n        css={css`\r\n          color: ${color.gray7} !important;\r\n          margin-left: 7px;\r\n        `}\r\n      >\r\n        {props.posterSession}{\" \"}\r\n        <span\r\n          css={css`\r\n            color: ${color.gray6};\r\n          `}\r\n        >\r\n          Poster Session\r\n        </span>\r\n      </span>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div\r\n      css={css`\r\n        * {\r\n          color: black;\r\n        }\r\n        width: 100%;\r\n        text-align: left;\r\n        padding: 30px 0px;\r\n        border-bottom: 1px solid ${color.gray5};\r\n      `}\r\n    >\r\n      <div\r\n        css={css`\r\n          position: relative;\r\n          margin-bottom: 2px;\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            display: inline-block;\r\n            width: 100px;\r\n            position: absolute;\r\n            left: -110px;\r\n            text-align: right;\r\n            top: 2px;\r\n          `}\r\n        >\r\n          <div\r\n            css={css`\r\n              font-weight: normal;\r\n              text-align: right !important;\r\n              font-size: 18px;\r\n            `}\r\n          >\r\n            [{props.i + 1}]\r\n          </div>\r\n        </div>\r\n        <h2\r\n          css={css`\r\n            font-weight: 600;\r\n            margin-bottom: 0px;\r\n          `}\r\n        >\r\n          {props.title}\r\n        </h2>\r\n      </div>\r\n      <h4\r\n        css={css`\r\n          font-size: 15px;\r\n          color: ${color.gray8};\r\n          margin-bottom: 3px;\r\n        `}\r\n      >\r\n        {props.authors.join(\", \")}\r\n      </h4>\r\n      <p\r\n        css={css`\r\n          text-align: left;\r\n          font-size: 14px;\r\n        `}\r\n      >\r\n        {abstract}\r\n      </p>\r\n      <div\r\n        css={css`\r\n          margin-top: 10px;\r\n        `}\r\n      >\r\n        {props.pdf ? (\r\n          <a href={props.pdf.substring(\"https:\".length)} target=\"_blank\">\r\n            <div\r\n              css={css`\r\n                display: inline-block;\r\n                padding-left: 10px;\r\n                padding-right: 10px;\r\n                padding-top: 2px;\r\n                padding-bottom: 3px;\r\n                margin-right: 10px;\r\n                border: 1px solid ${color.gray5};\r\n                border-radius: 5px;\r\n                transition-duration: 0.3s;\r\n\r\n                &:hover {\r\n                  border-color: ${color.gray6 + \"88\"};\r\n                  background-color: ${color.gray2};\r\n                }\r\n\r\n                > .emoji-mart-emoji {\r\n                  vertical-align: middle;\r\n                }\r\n              `}\r\n            >\r\n              <Emoji emoji=\"page_facing_up\" size={16} /> PDF\r\n            </div>\r\n          </a>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {s2}\r\n        {props.arXiv ? (\r\n          <a href={props.arXiv.substring(\"http:\".length)} target=\"_blank\">\r\n            <div\r\n              css={css`\r\n                display: inline-block;\r\n                padding-left: 10px;\r\n                padding-right: 10px;\r\n                padding-top: 2px;\r\n                padding-bottom: 3px;\r\n                margin-right: 10px;\r\n                border: 1px solid ${color.gray5};\r\n                border-radius: 5px;\r\n                transition-duration: 0.3s;\r\n\r\n                &:hover {\r\n                  border-color: ${color.gray6 + \"88\"};\r\n                  background-color: ${color.gray2};\r\n                }\r\n\r\n                > .emoji-mart-emoji {\r\n                  vertical-align: middle;\r\n                }\r\n              `}\r\n            >\r\n              <Emoji emoji=\"closed_book\" size={16} /> arXiv\r\n            </div>\r\n          </a>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        <div\r\n          css={css`\r\n            border: 1px solid ${showTweets ? \"#1d9bf066\" : color.gray5};\r\n            display: inline-block;\r\n            padding-left: 10px;\r\n            padding-right: 10px;\r\n            padding-top: 2px;\r\n            padding-bottom: 4px;\r\n            border-radius: 5px;\r\n            transition-duration: 0.3s;\r\n            margin-right: 10px;\r\n\r\n            &:hover {\r\n              background-color: #1d9bf011;\r\n              border-color: #1d9bf066;\r\n              cursor: pointer;\r\n            }\r\n            background-color: ${showTweets ? \"#1d9bf011\" : \"transparent\"};\r\n\r\n            > span {\r\n              color: ${color.gray10} !important;\r\n            }\r\n          `}\r\n          onClick={() =>\r\n            setShowTweets((prev) => {\r\n              if (prev) {\r\n                setNTweets(3);\r\n              }\r\n              return !prev;\r\n            })\r\n          }\r\n        >\r\n          <img\r\n            src={TwitterLogo}\r\n            css={css`\r\n              height: 14px;\r\n              margin-top: -3px;\r\n            `}\r\n          />{\" \"}\r\n          <span>{showTweets ? \"Hide\" : \"Show\"} Tweets</span>\r\n        </div>\r\n      </div>\r\n      <div\r\n        css={css`\r\n          margin-top: 10px;\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            display: inline-block;\r\n            margin-right: 16px;\r\n            .emoji-mart-emoji {\r\n              vertical-align: middle;\r\n            }\r\n          `}\r\n        >\r\n          <Emoji emoji=\"bee\" size={16} />{\" \"}\r\n          <span\r\n            css={css`\r\n              color: ${color.light.yellow9};\r\n              font-weight: 600;\r\n            `}\r\n          >\r\n            {buzz}\r\n          </span>\r\n        </div>\r\n        {props.citations ? (\r\n          <div\r\n            css={css`\r\n              display: inline-block;\r\n              margin-right: 16px;\r\n            `}\r\n          >\r\n            <img\r\n              src={CiteIcon}\r\n              css={css`\r\n                height: 13px;\r\n                margin-top: -1px;\r\n              `}\r\n            />{\" \"}\r\n            <span\r\n              css={css`\r\n                color: #d77a27;\r\n                font-weight: 600;\r\n              `}\r\n            >\r\n              {props.citations}\r\n            </span>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {props.twitter === null ? (\r\n          <></>\r\n        ) : (\r\n          <div\r\n            css={css`\r\n              display: inline-block;\r\n            `}\r\n          >\r\n            <div\r\n              css={css`\r\n                /* background-color: #1d9bf0; */\r\n                display: inline-block;\r\n\r\n                > div {\r\n                  padding-top: 2px;\r\n                  padding-bottom: 4px;\r\n                  border-radius: 5px;\r\n                  display: inline-block;\r\n                  margin-right: 16px;\r\n                  > span {\r\n                    color: #1d9bf0 !important;\r\n                    font-weight: 600;\r\n                  }\r\n                  > img {\r\n                    height: 13px;\r\n                    display: inline-block;\r\n                    margin-top: -2px;\r\n                  }\r\n                }\r\n              `}\r\n            >\r\n              <div>\r\n                <img src={ReplyIcon} /> <span>{props.twitter.replies}</span>\r\n              </div>\r\n              <div>\r\n                <img src={RetweetIcon} /> <span>{props.twitter.retweets}</span>\r\n              </div>\r\n              <div>\r\n                <img src={LikeIcon} /> <span>{props.twitter.likes}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {posterSession}\r\n      {showTweets ? (\r\n        <div\r\n          css={css`\r\n            max-width: 1200px;\r\n          `}\r\n        >\r\n          {props.twitter.ids\r\n            .slice(0, nTweets)\r\n            .map((tweetId: string, i: number) => (\r\n              <Tweet tweetId={tweetId} key={i} />\r\n            ))}\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      {showTweets && props.twitter.ids.length > nTweets ? (\r\n        <div\r\n          css={css`\r\n            border: 1px solid ${color.gray5};\r\n            display: block;\r\n            padding-left: 10px;\r\n            padding-right: 10px;\r\n            padding-top: 2px;\r\n            padding-bottom: 4px;\r\n            border-radius: 5px;\r\n            transition-duration: 0.3s;\r\n            margin-right: 10px;\r\n            margin-top: 15px;\r\n            max-width: 1080px;\r\n            text-align: center;\r\n\r\n            &:hover {\r\n              cursor: pointer;\r\n            }\r\n            background-color: #1d9bf011;\r\n            border-color: #1d9bf066;\r\n\r\n            > span {\r\n              color: ${color.gray10} !important;\r\n            }\r\n          `}\r\n          onClick={() => setNTweets((prev) => prev + 3)}\r\n        >\r\n          <img\r\n            src={TwitterLogo}\r\n            css={css`\r\n              height: 14px;\r\n              margin-top: -3px;\r\n            `}\r\n          />{\" \"}\r\n          <span>Show More</span>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DecimalStep(props: { inputValue: number; setInputValue; setDirty }) {\r\n  return (\r\n    <Row>\r\n      <Col span={12}>\r\n        <Slider\r\n          min={0}\r\n          max={1}\r\n          onChange={(value: number) => {\r\n            if (isNaN(value)) {\r\n              return;\r\n            }\r\n            props.setInputValue(value);\r\n            props.setDirty(true);\r\n          }}\r\n          value={typeof props.inputValue === \"number\" ? props.inputValue : 0}\r\n          step={0.01}\r\n          tooltipVisible={false}\r\n        />\r\n      </Col>\r\n      <Col\r\n        span={4}\r\n        css={css`\r\n          margin-top: -12px;\r\n        `}\r\n      >\r\n        <InputNumber\r\n          min={0}\r\n          max={1}\r\n          style={{ margin: \"0 16px\" }}\r\n          step={0.01}\r\n          value={props.inputValue}\r\n          onChange={(value: number) => {\r\n            if (isNaN(value)) {\r\n              return;\r\n            }\r\n            props.setInputValue(value);\r\n            props.setDirty(true);\r\n          }}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nfunction SortWeights(props: { setSortWeights }) {\r\n  const [citationsInput, setCitationsInput] = useState(\r\n      STARTING_WEIGHTS.citations\r\n    ),\r\n    [retweetsInput, setRetweetsInput] = useState(STARTING_WEIGHTS.retweets),\r\n    [likesInput, setLikesInput] = useState(STARTING_WEIGHTS.likes),\r\n    [repliesInput, setRepliesInput] = useState(STARTING_WEIGHTS.replies),\r\n    [isDirty, setDirty] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        css={css`\r\n          font-weight: 600;\r\n          margin-bottom: 10px;\r\n          margin-top: 30px;\r\n        `}\r\n      >\r\n        Sorting Weights\r\n      </div>\r\n      <div\r\n        css={css`\r\n          > div {\r\n            margin-bottom: 0px;\r\n            * {\r\n              color: black;\r\n            }\r\n            > div:nth-child(1) {\r\n              color: white !important;\r\n              margin-bottom: -8px;\r\n            }\r\n          }\r\n        `}\r\n      >\r\n        <div>\r\n          <div>Citations</div>{\" \"}\r\n          <DecimalStep\r\n            inputValue={citationsInput}\r\n            setInputValue={setCitationsInput}\r\n            setDirty={setDirty}\r\n          />\r\n        </div>\r\n        <div>\r\n          <div>Replies</div>{\" \"}\r\n          <DecimalStep\r\n            inputValue={repliesInput}\r\n            setInputValue={setRepliesInput}\r\n            setDirty={setDirty}\r\n          />\r\n        </div>\r\n        <div>\r\n          <div>Retweets</div>{\" \"}\r\n          <DecimalStep\r\n            inputValue={retweetsInput}\r\n            setInputValue={setRetweetsInput}\r\n            setDirty={setDirty}\r\n          />\r\n        </div>\r\n        <div>\r\n          <div>Likes</div>{\" \"}\r\n          <DecimalStep\r\n            inputValue={likesInput}\r\n            setInputValue={setLikesInput}\r\n            setDirty={setDirty}\r\n          />\r\n        </div>\r\n        <Button\r\n          css={css`\r\n            width: 100%;\r\n            margin-top: 8px;\r\n            background-color: ${isDirty\r\n              ? darken(0.1, \"#7f9ef3\")\r\n              : darken(0.4, \"#7f9ef3\")} !important;\r\n            filter: ${isDirty ? \"saturate(1)\" : \"saturate(0.3)\"};\r\n            border-color: transparent !important;\r\n            &:hover {\r\n              cursor: ${isDirty ? \"pointer\" : \"default\"} !important;\r\n            }\r\n            > span {\r\n              color: ${isDirty ? color.gray1 : color.gray4 + \"aa\"} !important;\r\n            }\r\n          `}\r\n          onClick={() => {\r\n            // Checks if already sorted\r\n            if (!isDirty) {\r\n              return;\r\n            }\r\n\r\n            props.setSortWeights({\r\n              citations: citationsInput,\r\n              retweets: retweetsInput,\r\n              likes: likesInput,\r\n              replies: repliesInput,\r\n            });\r\n            setDirty(false);\r\n          }}\r\n        >\r\n          Sort\r\n        </Button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction PosterSessionDate(props: {\r\n  date: string;\r\n  posterSessions;\r\n  setPosterSessions;\r\n}) {\r\n  return (\r\n    <div>\r\n      <Checkbox\r\n        checked={props.posterSessions.has(props.date)}\r\n        onChange={() => {\r\n          props.posterSessions.has(props.date)\r\n            ? props.setPosterSessions((prev) => {\r\n                prev = new Set(prev);\r\n                prev.delete(props.date);\r\n                return prev;\r\n              })\r\n            : props.setPosterSessions((prev) => {\r\n                prev = new Set(prev);\r\n                prev.add(props.date);\r\n                return prev;\r\n              });\r\n        }}\r\n      >\r\n        {props.date}\r\n      </Checkbox>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Home({ data }) {\r\n  let papers = data.allPaperDataJson.edges;\r\n\r\n  const [abstractDisplayStyle, setAbstractDisplayStyle] = useState(\"preview\"),\r\n    [foldMenu, setFoldMenu] = useState(false),\r\n    [sortWeights, setSortWeights] = useState({\r\n      citations: STARTING_WEIGHTS.citations,\r\n      retweets: STARTING_WEIGHTS.retweets,\r\n      likes: STARTING_WEIGHTS.likes,\r\n      replies: STARTING_WEIGHTS.replies,\r\n    }),\r\n    [posterSessions, setPosterSessions] = useState(new Set([]));\r\n\r\n  if (posterSessions.size !== 0) {\r\n    papers = papers.filter((paper: { node: PaperData }) => {\r\n      return posterSessions.has(paper.node.posterSession);\r\n    });\r\n  }\r\n\r\n  papers.sort((p1: { node: PaperData }, p2: { node: PaperData }) => {\r\n    let citations1 = p1.node.citations == null ? 0 : p1.node.citations;\r\n    let likes1: number, retweets1: number, replies1: number;\r\n    if (p1.node.twitter === null) {\r\n      likes1 = 0;\r\n      retweets1 = 0;\r\n      replies1 = 0;\r\n    } else {\r\n      likes1 = p1.node.twitter.likes;\r\n      retweets1 = p1.node.twitter.retweets;\r\n      replies1 = p1.node.twitter.replies;\r\n    }\r\n\r\n    let citations2 = p2.node.citations == null ? 0 : p2.node.citations;\r\n    let likes2: number, retweets2: number, replies2: number;\r\n    if (p2.node.twitter === null) {\r\n      likes2 = 0;\r\n      retweets2 = 0;\r\n      replies2 = 0;\r\n    } else {\r\n      likes2 = p2.node.twitter.likes;\r\n      retweets2 = p2.node.twitter.retweets;\r\n      replies2 = p2.node.twitter.replies;\r\n    }\r\n\r\n    return (\r\n      sortWeights.citations * (citations2 - citations1) +\r\n      sortWeights.likes * (likes2 - likes1) +\r\n      sortWeights.retweets * (retweets2 - retweets1) +\r\n      sortWeights.replies * (replies2 - replies1)\r\n    );\r\n  });\r\n\r\n  // papers = papers.slice(0, 100);\r\n\r\n  return (\r\n    <div\r\n      css={css`\r\n        background-color: ${color.gray1};\r\n        min-height: 100vh;\r\n        color: white;\r\n        text-align: center;\r\n      `}\r\n    >\r\n      <Helmet>\r\n        <title>CVPR Buzz</title>\r\n      </Helmet>\r\n      {/* <header\r\n        css={css`\r\n          box-shadow: 0px 0px 8px 0px rgba(0, 0, 0, 0.15);\r\n          padding-top: 10px;\r\n          padding-bottom: 10px;\r\n          position: relative;\r\n          z-index: 99 !important;\r\n        `}\r\n      >\r\n        <h2>Hello, world!</h2>\r\n        <Latex>\r\n          The center of the universe is at $5+4$. One can also do something like\r\n          $5+4$.\r\n        </Latex>\r\n      </header> */}\r\n      {/* TODO: link to github/license */}\r\n      <div\r\n        css={css`\r\n          display: grid;\r\n          grid-template-columns: ${foldMenu\r\n            ? \"45px calc(100% - 45px)\"\r\n            : \"256px calc(100% - 256px)\"};\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            background-color: ${foldMenu ? \"transparent\" : color.dark.blue1};\r\n            color: white;\r\n            grid-row: 1;\r\n            grid-column: 1;\r\n            height: 100vh;\r\n            overflow-y: auto;\r\n            position: sticky;\r\n            top: 0px;\r\n            padding: 15px 15px;\r\n            text-align: left;\r\n            * {\r\n              color: white;\r\n            }\r\n          `}\r\n        >\r\n          {foldMenu ? (\r\n            <MenuFoldOutlined\r\n              css={css`\r\n                margin-top: 2px;\r\n                font-size: 18px;\r\n                transform: rotate(180deg);\r\n                * {\r\n                  color: ${color.dark.geekblue5} !important;\r\n                }\r\n                padding: 3px;\r\n                border-radius: 2px;\r\n                transition-duration: 0.1s;\r\n\r\n                &:hover {\r\n                  cursor: pointer;\r\n                  background-color: ${color.gray4};\r\n                }\r\n              `}\r\n              onClick={() => setFoldMenu((prev) => !prev)}\r\n            />\r\n          ) : (\r\n            <div>\r\n              <div\r\n                css={css`\r\n                  font-weight: 600;\r\n                  margin-bottom: 8px;\r\n                  text-align: left;\r\n                  font-size: 16px;\r\n                  margin-bottom: 15px;\r\n                `}\r\n              >\r\n                <span\r\n                  css={css`\r\n                    .emoji-mart-emoji {\r\n                      vertical-align: middle;\r\n                    }\r\n                  `}\r\n                >\r\n                  <Emoji emoji=\"bee\" size={18} /> CVPR Buzz{\" \"}\r\n                  <span\r\n                    css={css`\r\n                      font-weight: normal;\r\n                    `}\r\n                  >\r\n                    - 2021\r\n                  </span>\r\n                </span>\r\n                <MenuFoldOutlined\r\n                  css={css`\r\n                    float: right;\r\n                    margin-top: 2px;\r\n                    font-size: 18px;\r\n                    * {\r\n                      color: ${color.dark.geekblue8} !important;\r\n                    }\r\n                    padding: 3px;\r\n                    border-radius: 2px;\r\n                    transition-duration: 0.1s;\r\n\r\n                    &:hover {\r\n                      cursor: pointer;\r\n                      background-color: ${color.gray9};\r\n                    }\r\n                  `}\r\n                  onClick={() => setFoldMenu((prev) => !prev)}\r\n                />\r\n              </div>\r\n              <SortWeights setSortWeights={setSortWeights} />\r\n              <div\r\n                css={css`\r\n                  font-weight: 600;\r\n                  margin-bottom: 3px;\r\n                  margin-top: 30px;\r\n                `}\r\n              >\r\n                Poster Session\r\n              </div>\r\n              <div\r\n                css={css`\r\n                  > div {\r\n                    margin-bottom: 3px;\r\n                  }\r\n                `}\r\n              >\r\n                <PosterSessionDate\r\n                  date=\"Monday\"\r\n                  posterSessions={posterSessions}\r\n                  setPosterSessions={setPosterSessions}\r\n                />\r\n                <PosterSessionDate\r\n                  date=\"Tuesday\"\r\n                  posterSessions={posterSessions}\r\n                  setPosterSessions={setPosterSessions}\r\n                />\r\n                <PosterSessionDate\r\n                  date=\"Wednesday\"\r\n                  posterSessions={posterSessions}\r\n                  setPosterSessions={setPosterSessions}\r\n                />\r\n                <PosterSessionDate\r\n                  date=\"Thursday\"\r\n                  posterSessions={posterSessions}\r\n                  setPosterSessions={setPosterSessions}\r\n                />\r\n                <PosterSessionDate\r\n                  date=\"Friday\"\r\n                  posterSessions={posterSessions}\r\n                  setPosterSessions={setPosterSessions}\r\n                />\r\n              </div>\r\n              <div\r\n                css={css`\r\n                  font-weight: 600;\r\n                  margin-bottom: 8px;\r\n                  margin-top: 30px;\r\n                `}\r\n              >\r\n                Abstracts\r\n              </div>\r\n              <Radio.Group\r\n                css={css`\r\n                  width: 100%;\r\n\r\n                  * {\r\n                    background-color: transparent !important;\r\n                    /* width: 100% !important; */\r\n                  }\r\n\r\n                  .ant-radio-button-checked {\r\n                    background-color: ${color.dark.geekblue4} !important;\r\n                    z-index: -99 !important;\r\n                  }\r\n                  .ant-radio-button-wrapper {\r\n                    &:before {\r\n                      background-color: ${color.dark.geekblue7} !important;\r\n                    }\r\n                    border-color: ${color.dark.geekblue7} !important;\r\n                    width: 33% !important;\r\n                    text-align: center;\r\n                  }\r\n                  .ant-radio-button-wrapper-checked > span {\r\n                    color: white !important;\r\n                  }\r\n                `}\r\n                onChange={(e) => setAbstractDisplayStyle(e.target.value)}\r\n                value={abstractDisplayStyle}\r\n              >\r\n                <Radio.Button value=\"full\">Full</Radio.Button>\r\n                <Radio.Button value=\"preview\">Preview</Radio.Button>\r\n                <Radio.Button value=\"hide\">Hide</Radio.Button>\r\n              </Radio.Group>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div\r\n          css={css`\r\n            grid-row: 1;\r\n            grid-column: 2;\r\n            @media (max-width: 1500px) {\r\n              max-width: calc(100% - 50px);\r\n              margin-left: 50px;\r\n            }\r\n          `}\r\n        >\r\n          <div\r\n            css={css`\r\n              /* background-color: white; */\r\n              margin-right: 5%;\r\n              margin-left: 5%;\r\n              margin-top: 25px;\r\n              margin-bottom: 80px;\r\n              text-align: left;\r\n            `}\r\n          >\r\n            <h1\r\n              css={css`\r\n                text-align: left;\r\n                font-weight: 600;\r\n              `}\r\n            >\r\n              <span\r\n                css={css`\r\n                  .emoji-mart-emoji {\r\n                    vertical-align: middle;\r\n                  }\r\n                `}\r\n              >\r\n                <Emoji emoji=\"bee\" size={28} /> CVPR Buzz{\" \"}\r\n              </span>\r\n              <span\r\n                css={css`\r\n                  font-weight: normal;\r\n                `}\r\n              >\r\n                - 2021\r\n              </span>\r\n            </h1>\r\n            <h3\r\n              css={css`\r\n                margin-top: -10px;\r\n              `}\r\n            >\r\n              Built by{\" \"}\r\n              <a\r\n                href=\"//mattdeitke.com\"\r\n                target=\"_blank\"\r\n                css={css`\r\n                  color: ${color.light.blue6} !important;\r\n                  border-bottom: 1px dashed ${color.light.blue6};\r\n                `}\r\n              >\r\n                Matt Deitke\r\n              </a>\r\n            </h3>\r\n            <p\r\n              css={css`\r\n                color: ${color.gray8};\r\n                max-width: 500px;\r\n                margin-top: 15px;\r\n                margin-bottom: 10px;\r\n              `}\r\n            >\r\n              CVPR Buzz displays the most discussed papers at CVPR 2021 using\r\n              Twitter for indexing discussions and Semantic Scholar for\r\n              collecting citation data.\r\n            </p>\r\n            <p\r\n              css={css`\r\n                color: ${color.gray8};\r\n              `}\r\n            >\r\n              To add data or see how it was collected, checkout the GitHub repo:\r\n            </p>\r\n            <div>\r\n              <div\r\n                css={css`\r\n                  transition-duration: 0.3s;\r\n                  filter: invert(1);\r\n                  background-color: white;\r\n                  display: inline-block;\r\n                  padding: 10px 12px;\r\n                  padding-bottom: 12px;\r\n                  border-radius: 5px;\r\n                  margin-top: -5px;\r\n                  &:hover {\r\n                    opacity: 0.85;\r\n                  }\r\n                `}\r\n              >\r\n                <a\r\n                  href=\"//github.com/mattdeitke/cvpr-buzz\"\r\n                  target=\"_blank\"\r\n                  css={css`\r\n                    margin-top: -10px;\r\n                  `}\r\n                >\r\n                  <GithubOutlined\r\n                    css={css`\r\n                      font-size: 23px;\r\n                      vertical-align: middle;\r\n                      color: black;\r\n                    `}\r\n                  />{\" \"}\r\n                  <div\r\n                    css={css`\r\n                      vertical-align: middle;\r\n                      display: inline-block;\r\n                      font-size: 15px;\r\n                      color: black;\r\n                      margin-top: -3px;\r\n                      margin-left: 3px;\r\n                    `}\r\n                  >\r\n                    /mattdeitke/cvpr-buzz\r\n                  </div>\r\n                </a>\r\n              </div>\r\n              <Star owner=\"mattdeitke\" repo=\"cvpr-buzz\" />\r\n            </div>\r\n            <div\r\n              css={css`\r\n                color: ${color.gray6};\r\n                border-top: 1px solid ${color.gray4};\r\n                margin-top: 30px;\r\n                margin-bottom: -20px;\r\n                padding-top: 5px;\r\n              `}\r\n            >\r\n              {papers.length} results\r\n            </div>\r\n            {papers.map((paper: { node: PaperData }, i: number) => (\r\n              <Paper\r\n                abstractDisplayStyle={abstractDisplayStyle}\r\n                weights={sortWeights}\r\n                key={paper.node.id}\r\n                {...paper.node}\r\n                i={i}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const query = graphql`\r\n  {\r\n    allPaperDataJson {\r\n      edges {\r\n        node {\r\n          abstract\r\n          citations\r\n          title\r\n          twitter {\r\n            likes\r\n            replies\r\n            retweets\r\n            ids\r\n          }\r\n          id\r\n          s2id\r\n          pdf\r\n          posterSession\r\n          authors\r\n          arXiv\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}